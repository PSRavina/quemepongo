{"version":3,"sources":["components/navbar/Navbar.js","components/auth/AuthService.js","components/auth/Signup.js","components/auth/Login.js","services/ChlotesService.js","components/closet/closet.jsx","components/contents/Contents.js","components/newclothe/newclothe.jsx","services/temperatureServices.js","components/termperature/temperature.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","userInSession","logout","className","onClick","e","username","to","AuthService","signup","password","service","post","then","response","data","login","loggedin","get","this","axios","create","baseURL","process","REACT_APP_API","withCredentials","Signup","props","handleFormSubmit","event","preventDefault","state","setState","getUser","user","catch","error","handleChange","target","name","value","onSubmit","type","onChange","Component","Login","ClothesServices","getAllClothes","getClothe","id","addClothes","clothe","console","log","AllClothes","componentDidMount","services","Allclothes","clothes","err","category","storm","wind","image","map","src","alt","Contents","FormClothe","Clothes","field","for","placeholder","updateForm","sendForm","React","TemperatureService","getTemperature","Temperature","allTemps","Temps","country","sys","description","weather","icon","temp","main","humidity","windSpeed","speed","city","App","addFood","thecloth","Clothescopie","push","userObj","loggedInUser","fetchUser","Fragment","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1f5ddb25.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Navbar.css\"\n\nfunction Navbar({ userInSession, logout }) {\n\n  const handleLogout = e => {\n    logout();\n  };\n\n  return (\n    userInSession ?\n      <nav className=\"nav-style\">\n        <ul>\n          <li>\n            <button\n              onClick={(e) => handleLogout(e)}>Logout</button>\n          </li>\n        </ul>\n        <div className=\"header\">\n          <h2>Welcome {userInSession.username} - Ironhacker</h2>\n        </div>\n      </nav>\n      :\n      <div>\n        <nav className=\"nav-style1\">\n          <div>\n            <Link to=\"/signup\">Signup</Link>\n          </div>\n          <div>\n            <Link to=\"/login\">Login</Link>  \n          </div>\n          \n        </nav>\n      </div >\n  )\n}\n\nexport default Navbar;","// auth/auth-service.js\nimport axios from 'axios';\n\nclass AuthService {\n  constructor() {\n    this.service = axios.create({\n      baseURL: `${process.env.REACT_APP_API}/auth`,\n      withCredentials: true\n    });\n  }\n\n  signup = (username, password) => {\n    return this.service.post('/signup', {username, password})\n    .then(response => response.data)\n  }\n\n  login = (username, password) => {\n    return this.service.post('/login', {username, password})\n    .then(response => response.data)\n  }\n\n  loggedin = () => {\n    return this.service.get('/currentUser',)\n    .then(response => response.data)\n  }\n\n  logout = () => {\n    return this.service.post('/logout')\n    .then(response => response.data)\n  }\n}\n\nexport default AuthService;","// auth/Signup.js\nimport React, { Component } from 'react';\nimport AuthService from './AuthService'\n\n//signup y login son iguales a excepción de el html renderizado y el endpoint de nuestra API rest a la que llamamos\n//uno llama a /signup y el otro a /login usando nuestro AuthService\nclass Signup extends Component {\n  constructor(props){\n    super(props);\n    this.state = { username: '', password: '' };\n    this.service = new AuthService();\n  }\n    \n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n\n    //aquí llamamos al endpoint /signup de nuestra API Rest usando nuestro AuthService\n    this.service.signup(username, password)\n    .then( response => {\n        this.setState({\n            username: \"\", \n            password: \"\",\n        });\n        //aquí elevamos el nuevo usuario una vez creado a App usando getUser via props\n        //por tanto, informamos a App de que el nuevo usuario ha sido creado, provocando un re-render\n        //y mostrando la parte de contenidos. Mira la función getUser de App para más info (date cuenta de que establece el state de App)\n        this.props.getUser(response.user)\n    })\n    .catch(error => {\n      this.setState({\n        username: username,\n        password: password,\n        error: true\n      });\n    })\n  }\n\n  handleChange = (event) => {  \n    const {name, value} = event.target;\n    this.setState({[name]: value});\n  }\n      \n\n  render() {\n    return(\n      <div>\n        <h3>Welcome!, create your account next:</h3>\n\n        <form onSubmit={this.handleFormSubmit}>\n          <fieldset>\n            <label>Username:</label>\n            <input type=\"text\" name=\"username\" value={this.state.username} onChange={ e => this.handleChange(e)}/>\n          </fieldset>\n          \n          <fieldset>\n            <label>Password:</label>\n            <input type=\"password\" name=\"password\" value={this.state.password} onChange={ e => this.handleChange(e)} />\n          </fieldset>\n          \n          <input type=\"submit\" value=\"Sign up\" />\n        </form>\n\n        <h1>{this.state.error ? 'Error' : ''}</h1>\n      </div>\n    )\n  }\n}\n\nexport default Signup;","// auth/Signup.js\nimport React, { Component } from 'react';\n// import { Link } from 'react-router-dom';\nimport AuthService from './AuthService'\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: '', password: '' };\n    this.service = new AuthService();\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n\n    this.service.login(username, password)\n      .then(response => {\n        this.setState({\n          username: username,\n          password: password,\n          error: false\n        });\n\n        this.props.getUser(response)\n      })\n      .catch(error => {\n        this.setState({\n          username: username,\n          password: password,\n          error: true\n        });\n      })\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n\n    return (<div>\n      <h3>Please, login to our site</h3>\n\n      <form onSubmit={this.handleFormSubmit}>\n        <fieldset>\n          <label>Username:</label>\n          <input type=\"text\" name=\"username\" value={this.state.username} onChange={e => this.handleChange(e)} />\n        </fieldset>\n\n        <fieldset>\n          <label>Password:</label>\n          <input type=\"password\" name=\"password\" value={this.state.password} onChange={e => this.handleChange(e)} />\n        </fieldset>\n\n        <input type=\"submit\" value=\"Login\" />\n      </form>\n\n      <h1>{this.state.error ? 'Error' : ''}</h1>\n    </div>)\n  }\n}\n\nexport default Login;","import axios from \"axios\"\n\nexport default class ClothesServices {\n\n    constructor() {\n        this.service = axios.create({\n            baseURL: 'http://localhost:3001/api'\n        })\n    }\n\n    getAllClothes = () => this.service.get('/closet').then(response => response.data)\n    getClothe = id => this.service.get(`/getOneClothe/${id}`).then(response => response.data)\n    addClothes = clothe => this.service.post(`/new-clothes`, clothe).then(response => {\n        console.log(clothe)\n        return response.data\n    })\n}\n\n\n\n\n// //para hacer la petición a axios, \n// // luego llamamos a este componente desde donde queremos los datos y hacemos un constructor con un state.\n// //(aqui pedimos los datos de las Clothes)\n// this.ClothesService = new ClothesService();\n// let Clothes = [] //para que no de error a la hora de renderizar por temas de sincronía.\n\n\n// this.clothes\n// //VA CON EL THIS PORQUE ES UNA CLASE\n\n// //en el app (componente link to hacia el id)\n\n// //tema de filtrado con el json  this.state.clothes.filter(clothes => clothes.categorty o nombre o id === valor) y para qued","import React, { Component } from 'react'\nimport ClothesServices from '../../services/ChlotesService'\n\nclass AllClothes extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            clothes: [],\n            category: \"\",\n            storm: false,\n            wind: false,\n            type: \"\",\n            image: \"\",\n        }\n        this.services = new ClothesServices()\n    }\n    componentDidMount = () => this.getAllClothes()\n    getAllClothes = () => {\n        this.services.getAllClothes()\n            .then(Allclothes => {\n                console.log(Allclothes)\n                this.setState({ clothes: Allclothes })\n            })\n            .catch(err => console.log(\"TO-DO error en getAllClothes\", err))\n    }\n\n    render() {\n        return (\n            <>\n                <div>\n                    <h1>Lista de ropa</h1>\n                    <ul>\n                        {this.state.clothes.map(clothe => <div>\n                            <img src={clothe.image} alt=\"{clothe.image}\"/>\n                            <h2>Categoría: {clothe.category}</h2>\n                            <h2>Typo: {clothe.type}</h2>\n                            <p>Lluvioso: {clothe.storm}</p>\n                            <p>Viento: {clothe.wind}</p>\n\n                        </div>)}\n                    </ul>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default AllClothes","import React, { Component } from 'react';\nimport AllClothes from '../closet/closet';\nimport \"./Contents.css\"\n//clase componente que renderiza los contenidos genéricos\n//usando rendering condicional y el componente Switch que ya conocéis podéis mostrar los contenidos oportunos que queráis\nclass Contents extends Component {\n  render() {\n    return (<div className=\"allClothes\">\n        <AllClothes></AllClothes>\n        </div>);\n    \n  }\n}\n\nexport default Contents;","import React from 'react';\nimport ClothesServices from '../../services/ChlotesService';\n\nexport default class FormClothe extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            Clothes: [],\n            category: \"\",\n            storm: \"\",\n            wind: \"\",\n            type: \"\",\n            image: \"\",\n        }\n        this.services = new ClothesServices()\n    }\n\n\n\n    updateForm(e, field) {\n        this.setState({\n            ...this.state,\n            [field]: e.target.value\n        });\n    }\n\n    sendForm(e) {\n        e.preventDefault(); //para evitar el refresco de la página\n        this.setState({\n            category: \"\",\n            storm: \"\",\n            wind: \"\",\n            type: \"\",\n            image: \"\",\n        })\n            // .then(() => {\n            //})\n\n                this.services.addClothes(this.state)\n    }\n\n    render() {\n        return (\n            <div>\n                <form>\n\n                    <label for=\"category\">Choose a category:</label>\n                    <select value={this.state.category}>\n                        <option value=\"soleado\">Soleado</option>\n                        <option value=\"medio\">Medio</option>\n                        <option value=\"frio\">Frio</option>\n\n                    </select>\n                    <label for=\"storm\">Impermeable:</label>\n                    <select value={this.state.storm}>\n                        <option value=\"true\">Si</option>\n                        <option value=\"false\">no</option>\n\n                    </select>\n                    <label for=\"wind\">Cortavientos:</label>\n                    <select value={this.state.wind}>\n                        <option value=\"true\">Si</option>\n                        <option value=\"false\">no</option>\n\n                    </select>\n\n                    <label for=\"type\">Outfit:</label>\n                    <select value={this.state.type}>\n                        <option value=\"sportwear\">Deportiva</option>\n                        <option value=\"casual\">Casual</option>\n                        <option value=\"formal\">Formal</option>\n                        <option value=\"workwear\">Ropa de trabajo</option>\n\n                    </select>\n\n                    <input\n                        type=\"file\"\n                        placeholder=\"image\"\n                        value={this.state.image}\n\n                        onChange={e => this.updateForm(e, \"image\")}\n                    />\n                    <input type=\"submit\" value={\"Send form\"} onClick={e => this.sendForm(e)} />\n\n\n                </form>\n            </div>\n        )\n    }\n}","\nimport axios from 'axios'\n\nexport default class TemperatureService {\n\n    constructor() {\n        this.service = axios.create({\n            baseURL: `http://api.openweathermap.org/data/2.5/weather?q=Madrid&units=metric&appid=521ac5c00f7f010e3fec218a77ce8285&lang=es`\n        })\n    }\n    getTemperature = () => this.service.get().then(response => response.data)\n\n}","\nimport axios from 'axios'\nimport { render } from \"react-dom/cjs/react-dom.development\"\nimport TemperatureService from \"../../services/temperatureServices\"\nimport React, { Component } from 'react'\nimport \"./temperature.css\"\nclass Temperature extends Component {\n    constructor() {\n        super()\n        this.state = {\n            Temps: [],\n            country: \"\",\n            description: \"\",\n            icon: \"\",\n            temp: 0,\n            humidity: 0,\n            windSpeed: 0,\n            city: \"\",\n        }\n        this.services = new TemperatureService()\n    }\n\n    getTemperature = () => {\n        this.services.getTemperature()\n            .then(allTemps => {\n                console.log(allTemps)\n                this.setState({\n                    Temps: allTemps,\n                    country: allTemps.sys.country,\n                    description: allTemps.weather[0].description,\n                    icon: allTemps.weather[0].icon,\n                    temp: allTemps.main.temp,\n                    humidity: allTemps.main.humidity,\n                    windSpeed: allTemps.wind.speed,\n                    city: allTemps.name,\n\n                })\n\n            })\n            .catch(err => console.log(err))\n    }\n\n    componentDidMount = () => this.getTemperature()\n\n    render() {\n        // const { }\n        return (\n            <div>\n                <h2>{this.state.city}</h2>\n                <h2>{this.state.country}</h2>\n                <h2>{this.state.temp}ºC</h2>\n                <h2>{this.state.description}</h2>\n                <img className=\"Icon\" src= {`http://openweathermap.org/img/w/${this.state.icon}.png`} alt=\"Icon\" />\n                <h2>Humedad: {this.state.humidity}%</h2>\n                <h2>Velocidad del viento: {this.state.windSpeed}km/h</h2>\n            </div>\n        )\n    }\n\n}\n\nexport default Temperature;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\n// import ProjectList from './components/projects/ProjectList';\nimport Navbar from \"./components/navbar/Navbar\";\n// import ProjectDetails from './components/projects/ProjectDetails';\nimport Signup from \"./components/auth/Signup\";\nimport Login from \"./components/auth/Login\";\nimport AuthService from \"./components/auth/AuthService\";\nimport Contents from \"./components/contents/Contents\";\nimport FormClothe from \"./components/newclothe/newclothe\";\nimport Temperature from \"./components/termperature/temperature\";\nimport AllClothes from \"./components/closet/closet\";\n\n//App es la aplicación base, que se sirve del servicio AuthService para conectar con la bbdd\nclass App extends Component {\n  //en el tiempo de construcción de la aplicación, creamos una instancia del authservice\n  constructor(props) {\n    super(props);\n    //arrancamos el estado con un valor de loggedInUser con nada (luego lo vamos a reemplazar con el valor real)\n    this.state = { loggedInUser: null };\n    this.service = new AuthService();\n\n\n  }\n\n\n  updateForm(e, field) {\n    this.setState({\n      ...this.state,\n      [field]: e.target.value\n    });\n  }\n\n  addFood = thecloth => {\n    const Clothescopie = [...this.state.clothes]\n    Clothescopie.push(thecloth)\n    this.setState({ clothes: Clothescopie })\n  }\n\n  getUser = userObj => {\n    this.setState({\n      loggedInUser: userObj,\n    });\n  };\n\n  logout = () => {\n    this.service.logout().then(() => {\n      this.setState({ loggedInUser: null });\n    });\n  };\n\n  //este método vuelca la información del usuario y lo guarda en el state de app que siempre puedes revisitar\n  fetchUser() {\n    return this.service\n      .loggedin()\n      .then(response => {\n        this.setState({\n          loggedInUser: response,\n        });\n      })\n      .catch(err => {\n        this.setState({\n          loggedInUser: false,\n        });\n      });\n  }\n\n  componentDidMount() {\n    this.fetchUser();\n  }\n\n  render() {\n    //aqui hacemos rendering condicional dependiendo de si tenemos un usuario logeado o no\n    if (this.state.loggedInUser) {\n      //en este caso mostramos los contenidos ya que hay usuario\n      return (\n        <React.Fragment>\n          <Redirect to=\"/home\" />\n\n          <div className=\"home\">\n            <header className=\"App-header\">\n          <FormClothe></FormClothe>\n              <Navbar userInSession={this.state.loggedInUser} logout={this.logout} />\n              {/* aqui simplemente se muestra un lorem ipsum genérico para que veáis contenidos que solo se muestran a usuarios logeados */}\n            </header>\n            <body><Contents /></body>\n              \n          </div>\n        </React.Fragment>\n        //ola\n      );\n    } else {\n      //si no estás logeado, mostrar opcionalmente o login o signup\n      return (\n\n        <React.Fragment>\n          <Redirect to=\"/login\" />\n\n          <div className=\"App\">\n            <header className=\"App-header1\">\n              <div className=\"login\">\n                <Navbar userInSession={this.state.loggedInUser} logout={this.logout} />\n\n                <Switch>\n                  <Route exact path=\"/signup\" render={() => <Signup getUser={this.getUser} />} />\n                  <Route exact path=\"/login\" render={() => <Login getUser={(user) => this.getUser(user)} />} />\n                </Switch>\n\n              </div>\n              <div className=\"TempDiv\">\n                <h4>Temperatura :\n              <Temperature></Temperature>\n                </h4>\n              </div>\n            </header>\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n<Router>\n<App />\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}